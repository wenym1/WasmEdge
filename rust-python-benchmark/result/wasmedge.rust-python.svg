<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>wasmedge`void WasmEdge::Runtime::StackManager::push&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long long, long long, float, double, unsigned __int128, __int128, unsigned long long vector[2], long long vector[2], unsigned int vector[4], int vector[4], unsigned short vector[8], short vector[8], unsigned char vector[16], signed char vector[16], float vector[4], double vector[2], WasmEdge::UnknownRef, WasmEdge::FuncRef, WasmEdge::ExternRef&gt; &gt;(WasmEdge::Variant (699 samples, 0.19%)</title><rect x="1036.8" y="53" width="2.2" height="15.0" fill="rgb(238,212,6)" rx="2" ry="2" />
<text  x="1039.75" y="63.5" ></text>
</g>
<g >
<title>libc++.1.0.dylib`std::__1::__shared_mutex_base::lock_shared (119 samples, 0.03%)</title><rect x="1015.6" y="69" width="0.4" height="15.0" fill="rgb(245,76,54)" rx="2" ry="2" />
<text  x="1018.65" y="79.5" ></text>
</g>
<g >
<title>wasmedge`DYLD-STUB$$memcpy (280 samples, 0.08%)</title><rect x="1077.0" y="69" width="0.9" height="15.0" fill="rgb(252,128,48)" rx="2" ry="2" />
<text  x="1080.00" y="79.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::instantiate(WasmEdge::Runtime::StoreManager&amp;, WasmEdge::AST::Module const&amp;, std::__1::optional&lt;std::__1::basic_string_view&lt;char, std::__1::char_traits (60 samples, 0.02%)</title><rect x="10.3" y="165" width="0.2" height="15.0" fill="rgb(220,15,23)" rx="2" ry="2" />
<text  x="13.33" y="175.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Loader::Loader::loadInstruction (55 samples, 0.02%)</title><rect x="11.1" y="69" width="0.2" height="15.0" fill="rgb(206,163,30)" rx="2" ry="2" />
<text  x="14.13" y="79.5" ></text>
</g>
<g >
<title>wasmedge`std::__1::enable_if&lt;IsWasmNativeNumV&lt;unsigned long long&gt;, cxx20::expected&lt;void, WasmEdge::ErrCode&gt; &gt;::type WasmEdge::Executor::Executor::runStoreOp&lt;unsigned long long&gt; (444 samples, 0.12%)</title><rect x="1141.8" y="101" width="1.5" height="15.0" fill="rgb(234,46,50)" rx="2" ry="2" />
<text  x="1144.80" y="111.5" ></text>
</g>
<g >
<title>wasmedge`DYLD-STUB$$memcpy (247 samples, 0.07%)</title><rect x="1097.9" y="69" width="0.8" height="15.0" fill="rgb(223,228,31)" rx="2" ry="2" />
<text  x="1100.87" y="79.5" ></text>
</g>
<g >
<title>wasmedge`main (55 samples, 0.02%)</title><rect x="10.0" y="213" width="0.2" height="15.0" fill="rgb(219,4,43)" rx="2" ry="2" />
<text  x="13.02" y="223.5" ></text>
</g>
<g >
<title>libc++.1.0.dylib`std::__1::__shared_mutex_base::unlock_shared (74 samples, 0.02%)</title><rect x="1016.0" y="69" width="0.3" height="15.0" fill="rgb(208,99,34)" rx="2" ry="2" />
<text  x="1019.04" y="79.5" ></text>
</g>
<g >
<title>libc++.1.0.dylib`std::__1::__shared_mutex_base::unlock_shared (34 samples, 0.01%)</title><rect x="986.8" y="85" width="0.1" height="15.0" fill="rgb(253,53,28)" rx="2" ry="2" />
<text  x="989.78" y="95.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (5,031 samples, 1.40%)</title><rect x="986.9" y="85" width="16.5" height="15.0" fill="rgb(244,128,29)" rx="2" ry="2" />
<text  x="989.90" y="95.5" ></text>
</g>
<g >
<title>wasmedge`decltype(auto) std::__1::__variant_detail::__visitation::__base::__dispatcher&lt;0ul&gt;::__dispatch&lt;std::__1::__variant_detail::__dtor&lt;std::__1::__variant_detail::__traits&lt;WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::__1::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::__1::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;, (std::__1::__variant_detail::_Trait)1&gt;::__destroy()::'lambda'(auto&amp;)&amp;&amp;, std::__1::__variant_detail::__base&lt;(std::__1::__variant_detail::_Trait)1, WasmEdge::Runtime::Instance::FunctionInstance::WasmFunction, WasmEdge::Symbol&lt;void&gt;, std::__1::unique_ptr&lt;WasmEdge::Runtime::HostFunctionBase, std::__1::default_delete&lt;WasmEdge::Runtime::HostFunctionBase&gt; &gt; &gt;&amp;&gt;(auto,  (40 samples, 0.01%)</title><rect x="10.1" y="149" width="0.1" height="15.0" fill="rgb(217,118,52)" rx="2" ry="2" />
<text  x="13.07" y="159.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Validator::Validator::validate (136 samples, 0.04%)</title><rect x="1189.6" y="165" width="0.4" height="15.0" fill="rgb(241,136,19)" rx="2" ry="2" />
<text  x="1192.55" y="175.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::execute (35,494 samples, 9.85%)</title><rect x="11.4" y="117" width="116.3" height="15.0" fill="rgb(244,151,0)" rx="2" ry="2" />
<text  x="14.42" y="127.5" >wasmedge`WasmE..</text>
</g>
<g >
<title>wasmedge`WasmEdge::Runtime::StackManager::pushFrame (54 samples, 0.01%)</title><rect x="1017.5" y="69" width="0.2" height="15.0" fill="rgb(240,58,14)" rx="2" ry="2" />
<text  x="1020.50" y="79.5" ></text>
</g>
<g >
<title>libc++.1.0.dylib`std::__1::mutex::unlock (368 samples, 0.10%)</title><rect x="1029.0" y="69" width="1.2" height="15.0" fill="rgb(226,122,53)" rx="2" ry="2" />
<text  x="1032.02" y="79.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Runtime::Instance::ModuleInstance::~ModuleInstance (53 samples, 0.01%)</title><rect x="10.0" y="181" width="0.2" height="15.0" fill="rgb(225,214,17)" rx="2" ry="2" />
<text  x="13.03" y="191.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Loader::Loader::loadSection (270 samples, 0.07%)</title><rect x="10.5" y="133" width="0.9" height="15.0" fill="rgb(212,94,24)" rx="2" ry="2" />
<text  x="13.53" y="143.5" ></text>
</g>
<g >
<title>wasmedge`std::__1::enable_if&lt;IsWasmNativeNumV&lt;unsigned long long&gt;, cxx20::expected&lt;void, WasmEdge::ErrCode&gt; &gt;::type WasmEdge::Executor::Executor::runStoreOp&lt;unsigned long long&gt; (2,687 samples, 0.75%)</title><rect x="1071.4" y="85" width="8.8" height="15.0" fill="rgb(225,201,6)" rx="2" ry="2" />
<text  x="1074.36" y="95.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::runCallIndirectOp (919 samples, 0.26%)</title><rect x="1015.0" y="85" width="3.1" height="15.0" fill="rgb(231,94,32)" rx="2" ry="2" />
<text  x="1018.05" y="95.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::execute (284,753 samples, 79.05%)</title><rect x="256.7" y="117" width="932.9" height="15.0" fill="rgb(220,5,35)" rx="2" ry="2" />
<text  x="259.74" y="127.5" >wasmedge`WasmEdge::Executor::Executor::execute</text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::enterFunction (343 samples, 0.10%)</title><rect x="1016.4" y="69" width="1.1" height="15.0" fill="rgb(239,185,51)" rx="2" ry="2" />
<text  x="1019.36" y="79.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::branchToLabel (1,038 samples, 0.29%)</title><rect x="258.3" y="101" width="3.4" height="15.0" fill="rgb(221,142,48)" rx="2" ry="2" />
<text  x="261.33" y="111.5" ></text>
</g>
<g >
<title>wasmedge`std::__1::enable_if&lt;IsWasmNumV&lt;unsigned long long&gt;, cxx20::expected&lt;void, WasmEdge::ErrCode&gt; &gt;::type WasmEdge::Runtime::Instance::MemoryInstance::loadValue&lt;unsigned long long&gt; (577 samples, 0.16%)</title><rect x="1098.7" y="69" width="1.9" height="15.0" fill="rgb(215,59,29)" rx="2" ry="2" />
<text  x="1101.68" y="79.5" ></text>
</g>
<g >
<title>wasmedge`std::__1::enable_if&lt;IsWasmNativeNumV&lt;unsigned int&gt;, cxx20::expected&lt;void, WasmEdge::ErrCode&gt; &gt;::type WasmEdge::Executor::Executor::runStoreOp&lt;unsigned int&gt; (6,718 samples, 1.87%)</title><rect x="1044.9" y="85" width="22.1" height="15.0" fill="rgb(227,214,26)" rx="2" ry="2" />
<text  x="1047.95" y="95.5" >w..</text>
</g>
<g >
<title>libc++.1.0.dylib`std::__1::__shared_mutex_base::unlock_shared (1,101 samples, 0.31%)</title><rect x="1025.3" y="69" width="3.6" height="15.0" fill="rgb(231,153,47)" rx="2" ry="2" />
<text  x="1028.33" y="79.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::runCallOp (7,704 samples, 2.14%)</title><rect x="1018.1" y="85" width="25.2" height="15.0" fill="rgb(227,154,4)" rx="2" ry="2" />
<text  x="1021.06" y="95.5" >w..</text>
</g>
<g >
<title>wasmedge`WasmEdge::Runtime::StackManager::pushFrame (413 samples, 0.11%)</title><rect x="1039.0" y="69" width="1.4" height="15.0" fill="rgb(248,162,6)" rx="2" ry="2" />
<text  x="1042.04" y="79.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Runtime::StackManager::pushFrame (155 samples, 0.04%)</title><rect x="1036.2" y="53" width="0.6" height="15.0" fill="rgb(242,26,9)" rx="2" ry="2" />
<text  x="1039.25" y="63.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::runReturnOp (113 samples, 0.03%)</title><rect x="1138.4" y="101" width="0.4" height="15.0" fill="rgb(251,196,22)" rx="2" ry="2" />
<text  x="1141.43" y="111.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::AST::Module::~Module (37 samples, 0.01%)</title><rect x="10.2" y="165" width="0.1" height="15.0" fill="rgb(215,91,23)" rx="2" ry="2" />
<text  x="13.21" y="175.5" ></text>
</g>
<g >
<title>wasmedge`std::__1::enable_if&lt;IsWasmNumV&lt;unsigned long long&gt;, cxx20::expected&lt;void, WasmEdge::ErrCode&gt; &gt;::type WasmEdge::Executor::Executor::runLoadOp&lt;unsigned long long&gt; (242 samples, 0.07%)</title><rect x="1150.2" y="101" width="0.8" height="15.0" fill="rgb(245,180,22)" rx="2" ry="2" />
<text  x="1153.17" y="111.5" ></text>
</g>
<g >
<title>wasmedge`DYLD-STUB$$std::__1::__shared_mutex_base::unlock_shared (138 samples, 0.04%)</title><rect x="1007.2" y="85" width="0.4" height="15.0" fill="rgb(236,31,45)" rx="2" ry="2" />
<text  x="1010.17" y="95.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::execute(WasmEdge::Runtime::StackManager&amp;, WasmEdge::AST::Instruction const*, WasmEdge::AST::Instruction const*)::$_0::operator() (267,173 samples, 74.17%)</title><rect x="262.2" y="101" width="875.2" height="15.0" fill="rgb(209,102,43)" rx="2" ry="2" />
<text  x="265.17" y="111.5" >wasmedge`WasmEdge::Executor::Executor::execute(WasmEdge::Runtime::StackManager&amp;, WasmEdge::AST::Instruction const*, WasmE..</text>
</g>
<g >
<title>wasmedge`std::__1::enable_if&lt;IsWasmNativeNumV&lt;unsigned int&gt;, cxx20::expected&lt;void, WasmEdge::ErrCode&gt; &gt;::type WasmEdge::Executor::Executor::runStoreOp&lt;unsigned int&gt; (916 samples, 0.25%)</title><rect x="1138.8" y="101" width="3.0" height="15.0" fill="rgb(209,106,52)" rx="2" ry="2" />
<text  x="1141.80" y="111.5" ></text>
</g>
<g >
<title>libc++.1.0.dylib`std::__1::__shared_mutex_base::lock_shared (1,668 samples, 0.46%)</title><rect x="1019.9" y="69" width="5.4" height="15.0" fill="rgb(249,6,33)" rx="2" ry="2" />
<text  x="1022.86" y="79.5" ></text>
</g>
<g >
<title>wasmedge`DYLD-STUB$$memcpy (546 samples, 0.15%)</title><rect x="1060.2" y="69" width="1.8" height="15.0" fill="rgb(212,95,44)" rx="2" ry="2" />
<text  x="1063.16" y="79.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::invoke(WasmEdge::Runtime::Instance::FunctionInstance const&amp;, cxx20::span&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long long, long long, float, double, unsigned __int128, __int128, unsigned long long vector[2], long long vector[2], unsigned int vector[4], int vector[4], unsigned short vector[8], short vector[8], unsigned char vector[16], signed char vector[16], float vector[4], double vector[2], WasmEdge::UnknownRef, WasmEdge::FuncRef, WasmEdge::ExternRef&gt; const, 18446744073709551615ul&gt;, cxx20::span (359,640 samples, 99.84%)</title><rect x="11.4" y="149" width="1178.2" height="15.0" fill="rgb(250,192,40)" rx="2" ry="2" />
<text  x="14.42" y="159.5" >wasmedge`WasmEdge::Executor::Executor::invoke(WasmEdge::Runtime::Instance::FunctionInstance const&amp;, cxx20::span&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long l..</text>
</g>
<g >
<title>libc++.1.0.dylib`DYLD-STUB$$pthread_mutex_lock (117 samples, 0.03%)</title><rect x="1025.4" y="53" width="0.4" height="15.0" fill="rgb(232,57,31)" rx="2" ry="2" />
<text  x="1028.41" y="63.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::VM::VM::runWasmFile(std::__1::__fs::filesystem::path const&amp;, std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt;, cxx20::span&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long long, long long, float, double, unsigned __int128, __int128, unsigned long long vector[2], long long vector[2], unsigned int vector[4], int vector[4], unsigned short vector[8], short vector[8], unsigned char vector[16], signed char vector[16], float vector[4], double vector[2], WasmEdge::UnknownRef, WasmEdge::FuncRef, WasmEdge::ExternRef&gt; const, 18446744073709551615ul&gt;, cxx20::span (360,145 samples, 99.98%)</title><rect x="10.2" y="181" width="1179.8" height="15.0" fill="rgb(205,219,4)" rx="2" ry="2" />
<text  x="13.21" y="191.5" >wasmedge`WasmEdge::VM::VM::runWasmFile(std::__1::__fs::filesystem::path const&amp;, std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt;, cxx20::span&lt;WasmEdg..</text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (404 samples, 0.11%)</title><rect x="256.7" y="101" width="1.4" height="15.0" fill="rgb(245,49,25)" rx="2" ry="2" />
<text  x="259.74" y="111.5" ></text>
</g>
<g >
<title>wasmedge`void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, WasmEdge::VM::Async&lt;cxx20::expected&lt;std::__1::vector&lt;std::__1::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long long, long long, float, double, unsigned __int128, __int128, unsigned long long vector[2], long long vector[2], unsigned int vector[4], int vector[4], unsigned short vector[8], short vector[8], unsigned char vector[16], signed char vector[16], float vector[4], double vector[2], WasmEdge::UnknownRef, WasmEdge::FuncRef, WasmEdge::ExternRef&gt;, WasmEdge::ValType&gt;, std::__1::allocator&lt;std::__1::pair&lt;WasmEdge::Variant (360,145 samples, 99.98%)</title><rect x="10.2" y="197" width="1179.8" height="15.0" fill="rgb(213,20,26)" rx="2" ry="2" />
<text  x="13.21" y="207.5" >wasmedge`void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, WasmE..</text>
</g>
<g >
<title>wasmedge`WasmEdge::Loader::Loader::loadExpression(WasmEdge::AST::Expression&amp;, std::__1::optional (255 samples, 0.07%)</title><rect x="10.6" y="101" width="0.8" height="15.0" fill="rgb(234,50,7)" rx="2" ry="2" />
<text  x="13.58" y="111.5" ></text>
</g>
<g >
<title>wasmedge`void WasmEdge::Runtime::StackManager::push&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long long, long long, float, double, unsigned __int128, __int128, unsigned long long vector[2], long long vector[2], unsigned int vector[4], int vector[4], unsigned short vector[8], short vector[8], unsigned char vector[16], signed char vector[16], float vector[4], double vector[2], WasmEdge::UnknownRef, WasmEdge::FuncRef, WasmEdge::ExternRef&gt; &gt;(WasmEdge::Variant (4,505 samples, 1.25%)</title><rect x="1101.9" y="85" width="14.7" height="15.0" fill="rgb(212,160,36)" rx="2" ry="2" />
<text  x="1104.86" y="95.5" ></text>
</g>
<g >
<title>libc++.1.0.dylib`std::__1::__shared_mutex_base::lock_shared (134 samples, 0.04%)</title><rect x="986.3" y="85" width="0.5" height="15.0" fill="rgb(210,201,20)" rx="2" ry="2" />
<text  x="989.35" y="95.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (839 samples, 0.23%)</title><rect x="1095.1" y="69" width="2.8" height="15.0" fill="rgb(237,47,15)" rx="2" ry="2" />
<text  x="1098.12" y="79.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`thread_start (360,145 samples, 99.98%)</title><rect x="10.2" y="229" width="1179.8" height="15.0" fill="rgb(205,125,15)" rx="2" ry="2" />
<text  x="13.21" y="239.5" >libsystem_pthread.dylib`thread_start</text>
</g>
<g >
<title>wasmedge`WasmEdge::AST::CodeSection::~CodeSection (36 samples, 0.01%)</title><rect x="10.2" y="149" width="0.1" height="15.0" fill="rgb(217,198,53)" rx="2" ry="2" />
<text  x="13.21" y="159.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (810 samples, 0.22%)</title><rect x="1074.3" y="69" width="2.7" height="15.0" fill="rgb(228,113,27)" rx="2" ry="2" />
<text  x="1077.34" y="79.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::enterFunction (135 samples, 0.04%)</title><rect x="261.7" y="101" width="0.5" height="15.0" fill="rgb(234,210,48)" rx="2" ry="2" />
<text  x="264.73" y="111.5" ></text>
</g>
<g >
<title>all (360,210 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(226,109,15)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>libc++.1.0.dylib`std::__1::mutex::lock (87 samples, 0.02%)</title><rect x="1020.8" y="53" width="0.3" height="15.0" fill="rgb(220,32,0)" rx="2" ry="2" />
<text  x="1023.79" y="63.5" ></text>
</g>
<g >
<title>libc+ (158 samples, 0.04%)</title><rect x="1019.3" y="69" width="0.6" height="15.0" fill="rgb(208,96,43)" rx="2" ry="2" />
<text  x="1022.34" y="79.5" ></text>
</g>
<g >
<title>wasmedge`void WasmEdge::Runtime::StackManager::push&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long long, long long, float, double, unsigned __int128, __int128, unsigned long long vector[2], long long vector[2], unsigned int vector[4], int vector[4], unsigned short vector[8], short vector[8], unsigned char vector[16], signed char vector[16], float vector[4], double vector[2], WasmEdge::UnknownRef, WasmEdge::FuncRef, WasmEdge::ExternRef&gt;&amp;&gt;(WasmEdge::Variant (6,342 samples, 1.76%)</title><rect x="1116.6" y="85" width="20.8" height="15.0" fill="rgb(243,42,40)" rx="2" ry="2" />
<text  x="1119.62" y="95.5" ></text>
</g>
<g >
<title>wasmedge`void WasmEdge::Runtime::StackManager::push&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long long, long long, float, double, unsigned __int128, __int128, unsigned long long vector[2], long long vector[2], unsigned int vector[4], int vector[4], unsigned short vector[8], short vector[8], unsigned char vector[16], signed char vector[16], float vector[4], double vector[2], WasmEdge::UnknownRef, WasmEdge::FuncRef, WasmEdge::ExternRef&gt; &gt;(WasmEdge::Variant (115 samples, 0.03%)</title><rect x="1017.7" y="69" width="0.4" height="15.0" fill="rgb(245,146,8)" rx="2" ry="2" />
<text  x="1020.68" y="79.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::VM::VM::unsafeExecute(WasmEdge::Runtime::Instance::ModuleInstance const*, std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt;, cxx20::span&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long long, long long, float, double, unsigned __int128, __int128, unsigned long long vector[2], long long vector[2], unsigned int vector[4], int vector[4], unsigned short vector[8], short vector[8], unsigned char vector[16], signed char vector[16], float vector[4], double vector[2], WasmEdge::UnknownRef, WasmEdge::FuncRef, WasmEdge::ExternRef&gt; const, 18446744073709551615ul&gt;, cxx20::span (359,640 samples, 99.84%)</title><rect x="11.4" y="165" width="1178.2" height="15.0" fill="rgb(244,212,39)" rx="2" ry="2" />
<text  x="14.42" y="175.5" >wasmedge`WasmEdge::VM::VM::unsafeExecute(WasmEdge::Runtime::Instance::ModuleInstance const*, std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt;, cxx20:..</text>
</g>
<g >
<title>wasmedge`DYLD-STUB$$std::__1::__shared_mutex_base::lock_shared (115 samples, 0.03%)</title><rect x="1006.8" y="85" width="0.4" height="15.0" fill="rgb(232,61,4)" rx="2" ry="2" />
<text  x="1009.79" y="95.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Validator::FormChecker::validate(cxx20::span&lt;WasmEdge::AST::Instruction const, 18446744073709551615ul&gt;, cxx20::span (123 samples, 0.03%)</title><rect x="1189.6" y="149" width="0.4" height="15.0" fill="rgb(218,175,21)" rx="2" ry="2" />
<text  x="1192.59" y="159.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::instantiate (51 samples, 0.01%)</title><rect x="10.4" y="149" width="0.1" height="15.0" fill="rgb(220,153,14)" rx="2" ry="2" />
<text  x="13.36" y="159.5" ></text>
</g>
<g >
<title>dyld`start (62 samples, 0.02%)</title><rect x="10.0" y="229" width="0.2" height="15.0" fill="rgb(242,0,36)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (2,920 samples, 0.81%)</title><rect x="1050.6" y="69" width="9.6" height="15.0" fill="rgb(207,126,37)" rx="2" ry="2" />
<text  x="1053.60" y="79.5" ></text>
</g>
<g >
<title>wasmedge`std::__1::enable_if&lt;IsWasmNativeNumV&lt;unsigned int&gt;, cxx20::expected&lt;void, WasmEdge::ErrCode&gt; &gt;::type WasmEdge::Runtime::Instance::MemoryInstance::storeValue&lt;unsigned int&gt; (1,346 samples, 0.37%)</title><rect x="1067.0" y="85" width="4.4" height="15.0" fill="rgb(206,138,16)" rx="2" ry="2" />
<text  x="1069.96" y="95.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::branchToLabel (759 samples, 0.21%)</title><rect x="1007.6" y="85" width="2.5" height="15.0" fill="rgb(234,153,41)" rx="2" ry="2" />
<text  x="1010.62" y="95.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Loader::Loader::parseModule (271 samples, 0.08%)</title><rect x="10.5" y="165" width="0.9" height="15.0" fill="rgb(207,26,4)" rx="2" ry="2" />
<text  x="13.53" y="175.5" ></text>
</g>
<g >
<title>wasmedge`void WasmEdge::Runtime::StackManager::push&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long long, long long, float, double, unsigned __int128, __int128, unsigned long long vector[2], long long vector[2], unsigned int vector[4], int vector[4], unsigned short vector[8], short vector[8], unsigned char vector[16], signed char vector[16], float vector[4], double vector[2], WasmEdge::UnknownRef, WasmEdge::FuncRef, WasmEdge::ExternRef&gt; &gt;(WasmEdge::Variant (79 samples, 0.02%)</title><rect x="1017.2" y="53" width="0.3" height="15.0" fill="rgb(213,13,11)" rx="2" ry="2" />
<text  x="1020.23" y="63.5" ></text>
</g>
<g >
<title>wasmedge`std::__1::enable_if&lt;IsWasmNativeNumV&lt;unsigned long long&gt;, cxx20::expected&lt;void, WasmEdge::ErrCode&gt; &gt;::type WasmEdge::Runtime::Instance::MemoryInstance::storeValue&lt;unsigned long long&gt; (354 samples, 0.10%)</title><rect x="1080.2" y="85" width="1.1" height="15.0" fill="rgb(207,202,23)" rx="2" ry="2" />
<text  x="1083.17" y="95.5" ></text>
</g>
<g >
<title>wasmedge`DYLD-STUB$$memcpy (1,019 samples, 0.28%)</title><rect x="1003.4" y="85" width="3.3" height="15.0" fill="rgb(236,65,44)" rx="2" ry="2" />
<text  x="1006.38" y="95.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Runtime::StackManager::pushFrame (263 samples, 0.07%)</title><rect x="1044.1" y="85" width="0.8" height="15.0" fill="rgb(242,172,5)" rx="2" ry="2" />
<text  x="1047.09" y="95.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Runtime::Instance::ModuleInstance::~ModuleInstance (45 samples, 0.01%)</title><rect x="10.1" y="165" width="0.1" height="15.0" fill="rgb(227,216,36)" rx="2" ry="2" />
<text  x="13.05" y="175.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_mutex_unlock (250 samples, 0.07%)</title><rect x="1029.4" y="53" width="0.8" height="15.0" fill="rgb(233,139,9)" rx="2" ry="2" />
<text  x="1032.41" y="63.5" ></text>
</g>
<g >
<title>wasmedge`void WasmEdge::Runtime::StackManager::push&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long long, long long, float, double, unsigned __int128, __int128, unsigned long long vector[2], long long vector[2], unsigned int vector[4], int vector[4], unsigned short vector[8], short vector[8], unsigned char vector[16], signed char vector[16], float vector[4], double vector[2], WasmEdge::UnknownRef, WasmEdge::FuncRef, WasmEdge::ExternRef&gt;&amp;&gt;(WasmEdge::Variant (7,345 samples, 2.04%)</title><rect x="1165.5" y="101" width="24.1" height="15.0" fill="rgb(252,155,26)" rx="2" ry="2" />
<text  x="1168.49" y="111.5" >w..</text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_mutex_lock (51 samples, 0.01%)</title><rect x="1016.1" y="53" width="0.2" height="15.0" fill="rgb(226,174,41)" rx="2" ry="2" />
<text  x="1019.11" y="63.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Validator::FormChecker::checkInstr (95 samples, 0.03%)</title><rect x="1189.6" y="133" width="0.3" height="15.0" fill="rgb(221,85,30)" rx="2" ry="2" />
<text  x="1192.62" y="143.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_mutex_lock (69 samples, 0.02%)</title><rect x="1015.8" y="53" width="0.2" height="15.0" fill="rgb(248,158,19)" rx="2" ry="2" />
<text  x="1018.81" y="63.5" ></text>
</g>
<g >
<title>wasmedge`std::__1::enable_if&lt;IsWasmNativeNumV&lt;unsigned int&gt;, cxx20::expected&lt;void, WasmEdge::ErrCode&gt; &gt;::type WasmEdge::Runtime::Instance::MemoryInstance::storeValue&lt;unsigned int&gt; (1,527 samples, 0.42%)</title><rect x="1062.0" y="69" width="5.0" height="15.0" fill="rgb(206,88,30)" rx="2" ry="2" />
<text  x="1064.95" y="79.5" ></text>
</g>
<g >
<title>wasmedge`void WasmEdge::Runtime::StackManager::push&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long long, long long, float, double, unsigned __int128, __int128, unsigned long long vector[2], long long vector[2], unsigned int vector[4], int vector[4], unsigned short vector[8], short vector[8], unsigned char vector[16], signed char vector[16], float vector[4], double vector[2], WasmEdge::UnknownRef, WasmEdge::FuncRef, WasmEdge::ExternRef&gt; &gt;(WasmEdge::Variant (322 samples, 0.09%)</title><rect x="1014.0" y="69" width="1.0" height="15.0" fill="rgb(211,84,10)" rx="2" ry="2" />
<text  x="1016.99" y="79.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::enterFunction (1,507 samples, 0.42%)</title><rect x="1010.1" y="85" width="4.9" height="15.0" fill="rgb(249,199,19)" rx="2" ry="2" />
<text  x="1013.11" y="95.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Loader::Loader::loadModule (271 samples, 0.08%)</title><rect x="10.5" y="149" width="0.9" height="15.0" fill="rgb(231,115,32)" rx="2" ry="2" />
<text  x="13.53" y="159.5" ></text>
</g>
<g >
<title>wasmedge`void WasmEdge::Runtime::StackManager::push&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long long, long long, float, double, unsigned __int128, __int128, unsigned long long vector[2], long long vector[2], unsigned int vector[4], int vector[4], unsigned short vector[8], short vector[8], unsigned char vector[16], signed char vector[16], float vector[4], double vector[2], WasmEdge::UnknownRef, WasmEdge::FuncRef, WasmEdge::ExternRef&gt; &gt;(WasmEdge::Variant (4,436 samples, 1.23%)</title><rect x="1151.0" y="101" width="14.5" height="15.0" fill="rgb(220,128,3)" rx="2" ry="2" />
<text  x="1153.96" y="111.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::enterFunction (2,690 samples, 0.75%)</title><rect x="1030.2" y="69" width="8.8" height="15.0" fill="rgb(238,64,36)" rx="2" ry="2" />
<text  x="1033.23" y="79.5" ></text>
</g>
<g >
<title>wasmedge`std::__1::enable_if&lt;IsWasmNumV&lt;unsigned int&gt;, cxx20::expected&lt;void, WasmEdge::ErrCode&gt; &gt;::type WasmEdge::Executor::Executor::runLoadOp&lt;unsigned int&gt; (3,373 samples, 0.94%)</title><rect x="1081.4" y="85" width="11.0" height="15.0" fill="rgb(230,136,11)" rx="2" ry="2" />
<text  x="1084.36" y="95.5" ></text>
</g>
<g >
<title>wasmedge`std::__1::enable_if&lt;IsWasmNumV&lt;unsigned int&gt;, cxx20::expected&lt;void, WasmEdge::ErrCode&gt; &gt;::type WasmEdge::Executor::Executor::runLoadOp&lt;unsigned int&gt; (2,107 samples, 0.58%)</title><rect x="1143.3" y="101" width="6.9" height="15.0" fill="rgb(225,53,52)" rx="2" ry="2" />
<text  x="1146.26" y="111.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Loader::Loader::loadSegment (267 samples, 0.07%)</title><rect x="10.5" y="117" width="0.9" height="15.0" fill="rgb(206,45,28)" rx="2" ry="2" />
<text  x="13.54" y="127.5" ></text>
</g>
<g >
<title>wasmedge`void WasmEdge::Runtime::StackManager::push&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long long, long long, float, double, unsigned __int128, __int128, unsigned long long vector[2], long long vector[2], unsigned int vector[4], int vector[4], unsigned short vector[8], short vector[8], unsigned char vector[16], signed char vector[16], float vector[4], double vector[2], WasmEdge::UnknownRef, WasmEdge::FuncRef, WasmEdge::ExternRef&gt; &gt;(WasmEdge::Variant (884 samples, 0.25%)</title><rect x="1040.4" y="69" width="2.9" height="15.0" fill="rgb(210,146,0)" rx="2" ry="2" />
<text  x="1043.40" y="79.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_mutex_lock (907 samples, 0.25%)</title><rect x="1022.4" y="53" width="2.9" height="15.0" fill="rgb(225,4,27)" rx="2" ry="2" />
<text  x="1025.35" y="63.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::runFunction(WasmEdge::Runtime::StackManager&amp;, WasmEdge::Runtime::Instance::FunctionInstance const&amp;, cxx20::span&lt;WasmEdge::Variant (359,640 samples, 99.84%)</title><rect x="11.4" y="133" width="1178.2" height="15.0" fill="rgb(205,27,44)" rx="2" ry="2" />
<text  x="14.42" y="143.5" >wasmedge`WasmEdge::Executor::Executor::runFunction(WasmEdge::Runtime::StackManager&amp;, WasmEdge::Runtime::Instance::FunctionInstance const&amp;, cxx20::span&lt;WasmEdge::Var..</text>
</g>
<g >
<title>wasmedge`DYLD-STUB$$memmove (81 samples, 0.02%)</title><rect x="258.1" y="101" width="0.2" height="15.0" fill="rgb(228,112,22)" rx="2" ry="2" />
<text  x="261.06" y="111.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::VM::VM::~VM (54 samples, 0.01%)</title><rect x="10.0" y="197" width="0.2" height="15.0" fill="rgb(212,63,30)" rx="2" ry="2" />
<text  x="13.03" y="207.5" ></text>
</g>
<g >
<title>libc++.1.0.dylib`std::__1::mutex::unlock (391 samples, 0.11%)</title><rect x="1021.1" y="53" width="1.3" height="15.0" fill="rgb(214,55,23)" rx="2" ry="2" />
<text  x="1024.07" y="63.5" ></text>
</g>
<g >
<title>wasmedge`std::__1::enable_if&lt;IsWasmNumV&lt;unsigned long long&gt;, cxx20::expected&lt;void, WasmEdge::ErrCode&gt; &gt;::type WasmEdge::Executor::Executor::runLoadOp&lt;unsigned long long&gt; (2,491 samples, 0.69%)</title><rect x="1092.4" y="85" width="8.2" height="15.0" fill="rgb(230,27,45)" rx="2" ry="2" />
<text  x="1095.41" y="95.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::runCallOp (294 samples, 0.08%)</title><rect x="1137.5" y="101" width="0.9" height="15.0" fill="rgb(233,101,21)" rx="2" ry="2" />
<text  x="1140.47" y="111.5" ></text>
</g>
<g >
<title>wasmedge`std::__1::enable_if&lt;IsWasmNumV&lt;unsigned long long&gt;, cxx20::expected&lt;void, WasmEdge::ErrCode&gt; &gt;::type WasmEdge::Runtime::Instance::MemoryInstance::loadValue&lt;unsigned long long&gt; (394 samples, 0.11%)</title><rect x="1100.6" y="85" width="1.3" height="15.0" fill="rgb(233,65,40)" rx="2" ry="2" />
<text  x="1103.57" y="95.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_mutex_unlock (288 samples, 0.08%)</title><rect x="1021.4" y="37" width="1.0" height="15.0" fill="rgb(217,180,32)" rx="2" ry="2" />
<text  x="1024.41" y="47.5" ></text>
</g>
<g >
<title>libc++.1.0.dylib`DYLD-STUB$$pthread_mutex_lock (97 samples, 0.03%)</title><rect x="1020.2" y="53" width="0.3" height="15.0" fill="rgb(208,214,52)" rx="2" ry="2" />
<text  x="1023.23" y="63.5" ></text>
</g>
<g >
<title>libsystem_pthread.dylib`pthread_mutex_lock (861 samples, 0.24%)</title><rect x="1026.1" y="53" width="2.8" height="15.0" fill="rgb(211,75,18)" rx="2" ry="2" />
<text  x="1029.11" y="63.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::runReturnOp (206 samples, 0.06%)</title><rect x="1043.3" y="85" width="0.7" height="15.0" fill="rgb(242,213,31)" rx="2" ry="2" />
<text  x="1046.33" y="95.5" ></text>
</g>
<g >
<title>libc++.1.0.dylib`std::__1::mutex::lock (97 samples, 0.03%)</title><rect x="1025.8" y="53" width="0.3" height="15.0" fill="rgb(226,71,52)" rx="2" ry="2" />
<text  x="1028.79" y="63.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Executor::Executor::execute(WasmEdge::Runtime::StackManager&amp;, WasmEdge::AST::Instruction const*, WasmEdge::AST::Instruction const*)::$_0::operator() (39,393 samples, 10.94%)</title><rect x="127.7" y="117" width="129.0" height="15.0" fill="rgb(218,28,11)" rx="2" ry="2" />
<text  x="130.69" y="127.5" >wasmedge`WasmEdg..</text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_start (360,145 samples, 99.98%)</title><rect x="10.2" y="213" width="1179.8" height="15.0" fill="rgb(235,47,11)" rx="2" ry="2" />
<text  x="13.21" y="223.5" >libsystem_pthread.dylib`_pthread_start</text>
</g>
<g >
<title>libc++.1.0.dylib`DYLD-STUB$$pthread_mutex_unlock (74 samples, 0.02%)</title><rect x="1020.5" y="53" width="0.3" height="15.0" fill="rgb(214,172,9)" rx="2" ry="2" />
<text  x="1023.55" y="63.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Loader::Loader::loadInstrSeq(std::__1::optional (243 samples, 0.07%)</title><rect x="10.6" y="85" width="0.8" height="15.0" fill="rgb(211,29,2)" rx="2" ry="2" />
<text  x="13.58" y="95.5" ></text>
</g>
<g >
<title>wasmedge`WasmEdge::Runtime::StackManager::pushFrame (73 samples, 0.02%)</title><rect x="1013.8" y="69" width="0.2" height="15.0" fill="rgb(227,124,14)" rx="2" ry="2" />
<text  x="1016.75" y="79.5" ></text>
</g>
<g >
<title>wasmedge`std::__1::enable_if&lt;IsWasmNativeNumV&lt;unsigned long long&gt;, cxx20::expected&lt;void, WasmEdge::ErrCode&gt; &gt;::type WasmEdge::Runtime::Instance::MemoryInstance::storeValue&lt;unsigned long long&gt; (688 samples, 0.19%)</title><rect x="1077.9" y="69" width="2.3" height="15.0" fill="rgb(233,64,11)" rx="2" ry="2" />
<text  x="1080.91" y="79.5" ></text>
</g>
</g>
</svg>
